using System;

public class OptionDataTables
{
    public static readonly Map<Option, object> s_defaultsMap;
    public static readonly Map<Option, System.Type> s_typeMap;

    static OptionDataTables()
    {
        Map<Option, System.Type> map = new Map<Option, System.Type>();
        map.Add(Option.SOUND, typeof(bool));
        map.Add(Option.MUSIC, typeof(bool));
        map.Add(Option.CURSOR, typeof(bool));
        map.Add(Option.HUD, typeof(bool));
        map.Add(Option.STREAMING, typeof(bool));
        map.Add(Option.SOUND_VOLUME, typeof(float));
        map.Add(Option.MUSIC_VOLUME, typeof(float));
        map.Add(Option.GFX_WIDTH, typeof(int));
        map.Add(Option.GFX_HEIGHT, typeof(int));
        map.Add(Option.GFX_FULLSCREEN, typeof(bool));
        map.Add(Option.HAS_SEEN_CINEMATIC, typeof(bool));
        map.Add(Option.GFX_QUALITY, typeof(int));
        map.Add(Option.FAKE_PACK_OPENING, typeof(bool));
        map.Add(Option.FAKE_PACK_COUNT, typeof(int));
        map.Add(Option.HEALTHY_GAMING_DEBUG, typeof(bool));
        map.Add(Option.LAST_SCENE_MODE, typeof(int));
        map.Add(Option.LOCALE, typeof(string));
        map.Add(Option.IDLE_KICKER, typeof(bool));
        map.Add(Option.IDLE_KICK_TIME, typeof(string));
        map.Add(Option.BACKGROUND_SOUND, typeof(bool));
        map.Add(Option.PREFERRED_REGION, typeof(int));
        map.Add(Option.NEARBY_PLAYERS, typeof(bool));
        map.Add(Option.GFX_WIN_CAMERA_CLEAR, typeof(bool));
        map.Add(Option.GFX_MSAA, typeof(int));
        map.Add(Option.GFX_FXAA, typeof(bool));
        map.Add(Option.GFX_TARGET_FRAME_RATE, typeof(int));
        map.Add(Option.GFX_VSYNC, typeof(int));
        map.Add(Option.CARD_BACK, typeof(int));
        map.Add(Option.CARD_BACK2, typeof(int));
        map.Add(Option.LOCAL_TUTORIAL_PROGRESS, typeof(long));
        map.Add(Option.CONNECT_TO_AURORA, typeof(bool));
        map.Add(Option.SEASON_END_THRESHOLD, typeof(int));
        map.Add(Option.RECONNECT, typeof(bool));
        map.Add(Option.RECONNECT_TIMEOUT, typeof(float));
        map.Add(Option.RECONNECT_RETRY_TIME, typeof(float));
        map.Add(Option.CHANGED_CARDS_DATA, typeof(string));
        map.Add(Option.KELTHUZADTAUNTS, typeof(int));
        map.Add(Option.GFX_WIN_POSX, typeof(int));
        map.Add(Option.GFX_WIN_POSY, typeof(int));
        map.Add(Option.PREFERRED_CDN_INDEX, typeof(int));
        map.Add(Option.LAST_FAILED_DOP_VERSION, typeof(int));
        map.Add(Option.TOUCH_MODE, typeof(bool));
        map.Add(Option.SHOWN_GFX_DEVICE_WARNING, typeof(bool));
        map.Add(Option.INTRO, typeof(bool));
        map.Add(Option.TUTORIAL_LOST_PROGRESS, typeof(int));
        map.Add(Option.ERROR_SCREEN, typeof(bool));
        map.Add(Option.CLIENT_OPTIONS_VERSION, typeof(int));
        map.Add(Option.IKS_VIEWS, typeof(int));
        map.Add(Option.IKS_LAST_DOWNLOAD_TIME, typeof(ulong));
        map.Add(Option.IKS_LAST_DOWNLOAD_RESPONSE, typeof(string));
        map.Add(Option.IKS_CACHE_AGE, typeof(int));
        map.Add(Option.SEEN_PACK_PRODUCT_LIST, typeof(string));
        map.Add(Option.CHEAT_HISTORY, typeof(string));
        map.Add(Option.PRELOAD_CARD_ASSETS, typeof(bool));
        map.Add(Option.USE_EXPERIMENTAL_CODE, typeof(bool));
        map.Add(Option.COLLECTION_PREMIUM_TYPE, typeof(string));
        map.Add(Option.DEV_TIMESCALE, typeof(float));
        map.Add(Option.IKS_LAST_SHOWN_AD, typeof(string));
        map.Add(Option.PAGE_MOUSE_OVERS, typeof(int));
        map.Add(Option.COVER_MOUSE_OVERS, typeof(int));
        map.Add(Option.LAST_PRECON_HERO_CHOSEN, typeof(int));
        map.Add(Option.AI_MODE, typeof(int));
        map.Add(Option.TIP_PRACTICE_PROGRESS, typeof(int));
        map.Add(Option.TIP_PLAY_PROGRESS, typeof(int));
        map.Add(Option.TIP_FORGE_PROGRESS, typeof(int));
        map.Add(Option.LAST_CUSTOM_DECK_CHOSEN, typeof(long));
        map.Add(Option.DECK_PICKER_MODE, typeof(int));
        map.Add(Option.SELECTED_ADVENTURE, typeof(int));
        map.Add(Option.SELECTED_ADVENTURE_MODE, typeof(int));
        map.Add(Option.LAST_SELECTED_STORE_BOOSTER_ID, typeof(int));
        map.Add(Option.LAST_SELECTED_STORE_ADVENTURE_ID, typeof(int));
        map.Add(Option.SERVER_OPTIONS_VERSION, typeof(int));
        map.Add(Option.LATEST_SEEN_TAVERNBRAWL_SEASON, typeof(int));
        map.Add(Option.LATEST_SEEN_TAVERNBRAWL_SEASON_CHALKBOARD, typeof(int));
        map.Add(Option.LAST_SELECTED_STORE_HERO_ID, typeof(int));
        map.Add(Option.TIMES_SEEN_TAVERNBRAWL_CRAZY_RULES_QUOTE, typeof(int));
        s_typeMap = map;
        Map<Option, object> map2 = new Map<Option, object>();
        map2.Add(Option.SOUND, true);
        map2.Add(Option.MUSIC, true);
        map2.Add(Option.CURSOR, true);
        map2.Add(Option.HUD, true);
        map2.Add(Option.STREAMING, true);
        map2.Add(Option.SOUND_VOLUME, 1f);
        map2.Add(Option.MUSIC_VOLUME, 0.5f);
        map2.Add(Option.GFX_QUALITY, 1);
        map2.Add(Option.IDLE_KICKER, true);
        map2.Add(Option.IDLE_KICK_TIME, "30 min");
        map2.Add(Option.BACKGROUND_SOUND, true);
        map2.Add(Option.PREFERRED_REGION, -1);
        map2.Add(Option.NEARBY_PLAYERS, true);
        map2.Add(Option.LOCAL_TUTORIAL_PROGRESS, 0L);
        map2.Add(Option.CONNECT_TO_AURORA, false);
        map2.Add(Option.SEASON_END_THRESHOLD, GameToastMgr.SEASON_TOAST_THRESHHOLDS.NONE);
        map2.Add(Option.RECONNECT, true);
        map2.Add(Option.RECONNECT_TIMEOUT, 60f);
        map2.Add(Option.RECONNECT_RETRY_TIME, 5f);
        map2.Add(Option.TOUCH_MODE, false);
        map2.Add(Option.SHOWN_GFX_DEVICE_WARNING, false);
        map2.Add(Option.INTRO, true);
        map2.Add(Option.TUTORIAL_LOST_PROGRESS, 0);
        map2.Add(Option.ERROR_SCREEN, true);
        map2.Add(Option.IKS_VIEWS, 0);
        map2.Add(Option.IKS_LAST_DOWNLOAD_TIME, 0);
        map2.Add(Option.IKS_LAST_DOWNLOAD_RESPONSE, string.Empty);
        map2.Add(Option.IKS_CACHE_AGE, 300);
        map2.Add(Option.SEEN_PACK_PRODUCT_LIST, string.Empty);
        map2.Add(Option.CHEAT_HISTORY, string.Empty);
        map2.Add(Option.PRELOAD_CARD_ASSETS, false);
        map2.Add(Option.USE_EXPERIMENTAL_CODE, true);
        map2.Add(Option.DEV_TIMESCALE, 1f);
        map2.Add(Option.IKS_LAST_SHOWN_AD, string.Empty);
        map2.Add(Option.IN_RANKED_PLAY_MODE, false);
        map2.Add(Option.SPECTATOR_OPEN_JOIN, true);
        map2.Add(Option.LATEST_SEEN_TAVERNBRAWL_SEASON, 0);
        map2.Add(Option.LATEST_SEEN_TAVERNBRAWL_SEASON_CHALKBOARD, 0);
        map2.Add(Option.TIMES_SEEN_TAVERNBRAWL_CRAZY_RULES_QUOTE, 0);
        s_defaultsMap = map2;
    }
}

