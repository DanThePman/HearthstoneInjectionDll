using PegasusShared;
using System;
using System.Runtime.InteropServices;

public interface IBattleNet
{
    void AcceptFriendlyChallenge(ref BattleNet.DllEntityId partyId);
    void AcceptPartyInvite(ulong invitationId);
    void AnswerChallenge(ulong challengeID, string answer);
    void ApplicationWasPaused();
    void ApplicationWasUnpaused();
    void AppQuit();
    void AssignPartyRole(BattleNet.DllEntityId partyId, BattleNet.DllEntityId memberId, uint roleId);
    int BattleNetStatus();
    void CancelChallenge(ulong challengeID);
    void CancelFindGame();
    bool CheckWebAuth(out string url);
    void ClearBnetEvents();
    void ClearChallenges();
    void ClearErrors();
    void ClearFriendsUpdates();
    void ClearNotifications();
    void ClearPartyAttribute(BattleNet.DllEntityId partyId, string attributeKey);
    void ClearPartyListenerEvents();
    void ClearPartyUpdates();
    void ClearPresence();
    void ClearWhispers();
    void CloseAurora();
    void CreateParty(string partyType, int privacyLevel, byte[] creatorBlob);
    void DeclineFriendlyChallenge(ref BattleNet.DllEntityId partyId);
    void DeclinePartyInvite(ulong invitationId);
    void DissolveParty(BattleNet.DllEntityId partyId);
    string FilterProfanity(string unfiltered);
    void FindGame(byte[] requestGuid, BnetGameType gameType, int missionId, long deckId, long aiDeckId, bool setScenarioIdAttr);
    string GetAccountCountry();
    int GetAccountRegion();
    void GetAllPartyAttributes(BattleNet.DllEntityId partyId, out string[] allKeys);
    void GetBnetEvents([Out] BattleNet.BnetEvent[] events);
    int GetBnetEventsSize();
    void GetChallenges([Out] BattleNet.DllChallengeInfo[] challenges);
    int GetCountPartyMembers(BattleNet.DllEntityId partyId);
    int GetCurrentRegion();
    string GetEnvironment();
    void GetErrors([Out] BnetErrorInfo[] errors);
    int GetErrorsCount();
    void GetFriendsInfo(ref BattleNet.DllFriendsInfo info);
    void GetFriendsUpdates([Out] BattleNet.FriendsUpdate[] updates);
    string GetLaunchOption(string key);
    BattleNetLogSource GetLogSource();
    int GetMaxPartyMembers(BattleNet.DllEntityId partyId);
    BattleNet.DllEntityId GetMyAccountId();
    BattleNet.DllEntityId GetMyGameAccountId();
    int GetNotificationCount();
    void GetNotifications([Out] BnetNotification[] notifications);
    void GetPartyAttributeBlob(BattleNet.DllEntityId partyId, string attributeKey, out byte[] value);
    bool GetPartyAttributeLong(BattleNet.DllEntityId partyId, string attributeKey, out long value);
    void GetPartyAttributeString(BattleNet.DllEntityId partyId, string attributeKey, out string value);
    void GetPartyInviteRequests(BattleNet.DllEntityId partyId, out InviteRequest[] requests);
    void GetPartyListenerEvents(out BattleNet.PartyListenerEvent[] events);
    void GetPartyMembers(BattleNet.DllEntityId partyId, out BattleNet.DllPartyMember[] members);
    int GetPartyPrivacy(BattleNet.DllEntityId partyId);
    void GetPartySentInvites(BattleNet.DllEntityId partyId, out PartyInvite[] invites);
    void GetPartyUpdates([Out] BattleNet.PartyEvent[] updates);
    void GetPartyUpdatesInfo(ref BattleNet.DllPartyInfo info);
    void GetPlayRestrictions(ref BattleNet.DllLockouts restrictions, bool reload);
    void GetPresence([Out] BattleNet.PresenceUpdate[] updates);
    BattleNet.QueueEvent GetQueueEvent();
    void GetQueueInfo(ref BattleNet.DllQueueInfo queueInfo);
    void GetReceivedPartyInvites(out PartyInvite[] invites);
    int GetShutdownMinutes();
    string GetStoredBNetIPAddress();
    string GetVersion();
    int GetVersionInt();
    string GetVersionSource();
    string GetVersionString();
    void GetWhisperInfo(ref BattleNet.DllWhisperInfo info);
    void GetWhispers([Out] BnetWhisper[] whispers);
    void IgnoreInviteRequest(BattleNet.DllEntityId partyId, BattleNet.DllEntityId requestedTargetId);
    bool Init(bool fromEditor);
    bool IsInitialized();
    void JoinParty(BattleNet.DllEntityId partyId, string partyType);
    void KickPartyMember(BattleNet.DllEntityId partyId, BattleNet.DllEntityId memberId);
    void LeaveParty(BattleNet.DllEntityId partyId);
    void ManageFriendInvite(int action, ulong inviteId);
    PegasusPacket NextUtilPacket();
    int NumChallenges();
    int PresenceSize();
    void ProcessAurora();
    void ProvideWebAuthToken(string token);
    void QueryAurora();
    void RemoveFriend(BnetAccountId account);
    void RequestCloseAurora();
    void RequestPartyInvite(BattleNet.DllEntityId partyId, BattleNet.DllEntityId whomToAskForApproval, BattleNet.DllEntityId whomToInvite, string szPartyType);
    void RequestPresenceFields(bool isGameAccountEntityId, [In] BattleNet.DllEntityId entityId, [In] BattleNet.DllPresenceFieldKey[] fieldList);
    void RescindFriendlyChallenge(ref BattleNet.DllEntityId partyId);
    void Reset();
    void RevokePartyInvite(BattleNet.DllEntityId partyId, ulong invitationId);
    void SendFriendInvite(string inviter, string invitee, bool byEmail);
    void SendFriendlyChallengeInvite(ref BattleNet.DllEntityId gameAccount, int scenarioId);
    void SendPartyChatMessage(BattleNet.DllEntityId partyId, string message);
    void SendPartyInvite(BattleNet.DllEntityId partyId, BattleNet.DllEntityId inviteeId, bool isReservation);
    void SendUtilPacket(int packetId, int systemId, byte[] bytes, int size, int subID, int context, ulong route);
    void SendWhisper(BnetGameAccountId gameAccount, string message);
    void SetMyFriendlyChallengeDeck(ref BattleNet.DllEntityId partyId, long deckID);
    void SetPartyAttributeBlob(BattleNet.DllEntityId partyId, string attributeKey, [In] byte[] value);
    void SetPartyAttributeLong(BattleNet.DllEntityId partyId, string attributeKey, [In] long value);
    void SetPartyAttributeString(BattleNet.DllEntityId partyId, string attributeKey, [In] string value);
    void SetPartyPrivacy(BattleNet.DllEntityId partyId, int privacyLevel);
    void SetPresenceBlob(uint field, byte[] val);
    void SetPresenceBool(uint field, bool val);
    void SetPresenceInt(uint field, long val);
    void SetPresenceString(uint field, string val);
    void SetRichPresence([In] BattleNet.DllRichPresenceUpdate[] updates);
}

